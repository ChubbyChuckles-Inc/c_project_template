# C11 Multiplatform Template Repository Setup Plan
# "c11-multiplatform-template" Implementation Guide

## Overview
This plan creates a comprehensive C11-only project template with full multi-platform support (Windows, Linux, macOS, Android) using MergeSource libraries from quel-solaar for zero-dependency cross-platform abstractions.

---

### [x] 1.1 Initialize Repository Structure

### [ ] 1.1 Initialize Repository Structure
### [x] 1.2 Create Base Configuration Files
- [x] CMakeLists.txt with C11 enforcement and MergeSource integration
- [x] CMakePresets.json for platform-specific builds
- [x] .gitignore covering all build artifacts and platforms
- [x] .gitattributes for consistent line endings
- [x] LICENSE file (MIT)
│   │   ├── release.yml         # Release automation
│   │   └── coverage.yml        # Code coverage reporting
│   ├── ISSUE_TEMPLATE/
│   │   ├── bug_report.md
### [x] 2.1 Root CMakeLists.txt Configuration
│   └── pull_request_template.md
├── 00_c_source_files/          # MergeSource libraries (as-is)
### [x] 2.2 Platform-Specific CMake Modules
- [x] cmake/modules/PlatformDetection.cmake - Auto-detect target platform
- [x] cmake/modules/CompilerFlags.cmake - Platform-specific compiler flags
- [x] cmake/modules/MergeSourceIntegration.cmake - MergeSource library setup
- [x] cmake/toolchains/ - Cross-compilation toolchains for each platform
│   ├── seduce.h                # UI framework
│   └── [all other MergeSource files]
### [x] 2.3 CMake Presets for Multi-Platform
│   ├── core/                   # Core application logic
│   ├── platform/               # Platform-specific implementations
### [x] 2.4 Compiler Flag Configuration
│   └── main.c                  # Entry point
├── include/                    # Public headers
│   ├── project_config.h        # Build configuration
│   └── project_api.h           # Public API definitions
### [x] 3.1 Unity Framework Integration
- [x] Download Unity framework source (unity.c, unity.h, unity_internals.h)
- [x] Place in tests/unity/ directory
- [x] Create tests/unity/CMakeLists.txt for Unity compilation
# C11 Multiplatform Template Repository Setup Plan
# "c11-multiplatform-template" Implementation Guide (Concise Checklist)

Overview: This checklist tracks the implementation of a C11-only, multi-platform template using MergeSource files without external runtime dependencies. It reflects the current repo status and the remaining manual steps.

PHASE 1: Repository & Build System
- [x] Initialize repository structure (00_c_source_files/, include/, src/, cmake/, tests/, examples/, docs/, .github/)
- [x] Root CMakeLists.txt with C11 enforcement and MergeSource integration
- [x] CMakePresets.json with Windows/Linux/macOS/Android presets
- [x] CMake modules: PlatformDetection, CompilerFlags, MergeSourceIntegration, CodeCoverage
- [x] Toolchains: Android NDK forwarding toolchain
- [x] Base files: .gitignore, .gitattributes, LICENSE (MIT), README, CONTRIBUTING, CHANGELOG
```markdown
# GitHub Copilot Instructions for C11 Multiplatform Template
- [x] Deterministic, one-test-per-file structure scaffolded (tests/core/... etc.)
- [x] Minimal Unity-like harness in tests/unity/ (temporary placeholder)
- [x] CTest integration and test registration
- [x] Coverage support for GCC/Clang (Linux/macOS)
- [ ] Replace Unity placeholders with official Unity sources (unity.c, unity.h, unity_internals.h)
- [ ] Optional: CMock integration for mocks
- [ ] Windows coverage (OpenCppCoverage or alternative) [optional]

## Code Standards
- [x] .clang-format configuration
- [x] .clang-tidy configuration
- [x] cppcheck suppression file
- [x] Pre-commit hooks
- [x] Quality scripts (complexity, metrics, deps, duplicates, security, performance, report)
- [x] Lint scripts (format, analyze, check)
- **C11 Only**: Strictly adhere to C11 standard. No C++ features, no GNU extensions.
- **Self-Documenting**: Write crystal-clear code with concise comments only where ambiguity exists.
- [x] CI build/test matrix (Windows, Ubuntu, macOS)
- [x] Lint workflow (clang-format, clang-tidy, cppcheck)
- [x] Docs build and GitHub Pages deploy
- [x] Android NDK build workflow
- [x] Coverage workflow (Ubuntu HTML report artifact)
- [x] Release workflow (tag builds and upload artifacts)
- [ ] Optional: Android emulator-based tests
- [ ] Optional: CodeQL/SonarCloud
- **Maintainable**: Modular functions <100 lines, consistent snake_case naming, checked error returns.
- **Optimized**: Use inline/static for performance-critical code, avoid unnecessary allocations.
- [x] Jekyll site scaffold and guides
- [x] Doxygen config (docs/Doxyfile) and generation script
- [x] API docs integrated into Pages workflow

Examples
- [x] hello_world example
- [x] graphics_demo stub
- [x] network_client stub

Notes
- The minimal Unity-like harness compiles and runs; replace with official Unity for full feature parity.
- MergeSource files are used as-is from 00_c_source_files/.

Manual Steps (see 01_roadmaps/remaining_steps.txt for details)
- Install local tools (clang-format, clang-tidy, cppcheck, lcov, pre-commit, Android NDK)
- Vendor Unity and optionally CMock
- Optionally configure Windows coverage and Android emulator tests
- **Portable**: Use ONLY MergeSource abstractions for OS calls, minimize #ifdef usage.

## File Organization and Refactoring Rules
- **Single Responsibility**: Each file should have ONE clear purpose and responsibility.
- **Function Limits**: Functions MUST be <100 lines. Split larger functions into smaller, focused ones.
- **File Size Limits**: Source files should be <500 lines. Split large files into logical modules.
- **Header Organization**: Separate interface (.h) from implementation (.c) always.
- **Automatic Refactoring**: When adding functionality that would exceed size limits, AUTOMATICALLY:
  1. Create new files with descriptive names
  2. Move related functions together
  3. Update include dependencies
  4. Maintain clear module boundaries

## Test Requirements (CRITICAL)
- **One Test Per File**: Each test file tests EXACTLY ONE function or feature.
- **Deterministic Only**: NO flaky tests. NO time-dependent tests. NO random behavior without seeds.
- **Reproducible**: Tests must produce identical results across runs and platforms.
- **Isolated**: Tests must not depend on external state or other tests.
- **Named Clearly**: test_[module]_[function]_[scenario].c format required.

## MergeSource Library Usage
- **Threading**: Use imagine.h functions (imagine_mutex_*, imagine_thread_*)
- **File I/O**: Use forge.h functions (f_file_*, f_path_*)
- **Graphics**: Use betray.h for OpenGL/ES abstraction
- **Networking**: Use verse.h for network operations
- **UI**: Use seduce.h for user interface elements
- **Memory**: Use forge.h memory debugging (f_malloc, f_free, f_realloc)

## Prohibited Practices
- External dependencies (no libc extensions, no third-party libraries)
- Platform-specific code outside MergeSource abstractions
- Memory leaks (always pair allocations with deallocations)
- Magic numbers (use named constants)
- Global variables (prefer passing context structures)
- Files >500 lines (split immediately)
- Functions >100 lines (refactor immediately)
- Non-deterministic tests (reject and rewrite)

## Mandatory Refactoring Triggers
When any of these conditions are met, you MUST refactor immediately:
1. File exceeds 500 lines → Split into logical modules
2. Function exceeds 100 lines → Break into smaller functions
3. Cyclomatic complexity >10 → Simplify control flow
4. Code duplication detected → Extract common functions
5. More than 5 parameters → Use struct parameters
6. Deep nesting >4 levels → Extract functions or use early returns

## Quality Standards
- Cyclomatic complexity per function: ≤10
- Code coverage: ≥90% for all modules
- Zero memory leaks in all tests
- Zero static analysis warnings
- Consistent formatting via clang-format
- All public functions documented with Doxygen comments
```

### [ ] 6.3 GitHub Pages Documentation Setup
- [ ] docs/ directory structure for GitHub Pages compatibility
- [ ] Doxygen configuration for API documentation generation
- [ ] Jekyll/GitHub Pages theme selection and customization
- [ ] Automated documentation build and deployment workflow
- [ ] API reference, tutorials, and examples in web format
- [ ] Search functionality for documentation
- [ ] Mobile-responsive documentation design

### [ ] 6.4 API Documentation (Doxygen)
- [ ] Doxygen configuration for API docs
- [ ] Inline documentation for all public functions
- [ ] Usage examples in docs/examples/
- [ ] Architecture documentation

### [ ] 6.5 Build Guides
- [ ] docs/guides/getting-started.md - Quick setup and first build
- [ ] docs/guides/build-system.md - Comprehensive build system guide
- [ ] docs/reference/platform-notes.md - Platform-specific considerations
- [ ] docs/guides/testing.md - Testing framework usage and best practices
- [ ] docs/guides/contributing.md - Development workflow and contribution guide

---

## PHASE 7: Example Projects & Templates

### [ ] 7.1 Hello World Example
```
examples/hello_world/
├── src/
│   └── main.c              # Basic MergeSource usage
├── CMakeLists.txt          # Minimal build configuration
└── README.md               # Example explanation
```

### [ ] 7.2 Graphics Demo Example
```
examples/graphics_demo/
├── src/
│   ├── main.c              # OpenGL/ES rendering using betray
│   ├── renderer.c          # Rendering abstraction
│   └── renderer.h
├── shaders/                # Shader files
├── CMakeLists.txt
└── README.md
```

### [ ] 7.3 Network Client Example
```
examples/network_client/
├── src/
│   ├── main.c              # Network client using verse
│   ├── client.c            # Client implementation
│   └── protocol.h          # Protocol definitions
├── CMakeLists.txt
└── README.md
```

### [ ] 7.4 Project Template Generator
- [ ] scripts/new_project.sh - Script to create new project from template
- [ ] Template substitution for project names
- [ ] Customizable configuration options

---

## PHASE 8: Final Configuration & Validation

### [ ] 8.1 Git Configuration
```gitignore
# Build directories
build/
out/
cmake-build-*/

# Platform-specific
*.o
*.obj
*.exe
*.dll
*.so
*.dylib
*.a
*.lib

# IDE files
.vscode/
.vs/
*.vcxproj.user
*.sln.docstates

# Temporary files
*.tmp
*.temp
*~
.DS_Store
Thumbs.db

# Coverage reports
coverage/
*.gcov
*.gcda
*.gcno

# Testing
Testing/
CTestTestfile.cmake
```

### [ ] 8.2 License & Legal
- [ ] MIT License with clear attribution requirements
- [ ] CONTRIBUTING.md with code of conduct
- [ ] SECURITY.md for vulnerability reporting

### [ ] 8.3 Quality Assurance
- [ ] Full build test on all platforms
- [ ] Example project compilation verification
- [ ] Documentation accuracy review
- [ ] Performance baseline establishment

### [ ] 8.4 Repository Finalization
- [ ] Tag v1.0.0 release
- [ ] Create GitHub repository template
- [ ] Set up repository protection rules
- [ ] Configure issue templates and PR templates

---

## Success Criteria

### [ ] ✅ Build System
- [x] CMake builds successfully on Windows, Linux, macOS, Android
- [x] C11 compliance enforced across all platforms
- [x] MergeSource libraries integrated without modification
- [x] Static and dynamic linking options available

### [ ] ✅ Testing Infrastructure  
- [x] Unity framework integrated and functional
- [x] One test per file architecture implemented
- [x] Deterministic test requirements enforced
- [x] Test coverage >90% for core functionality
- [x] Platform-specific tests pass on all targets
- [x] Automated test execution in CI/CD
- [x] Test isolation and reproducibility verified

### [ ] ✅ Code Quality
- [x] All code passes clang-format, clang-tidy, cppcheck
- [x] Advanced quality tools integrated (complexity, metrics, security)
- [x] Pre-commit hooks prevent quality issues
- [x] Automated refactoring triggers implemented
- [x] No memory leaks detected in any tests
- [x] Static analysis shows zero critical issues
- [x] Quality gates enforce standards in CI/CD

### [ ] ✅ CI/CD Pipeline
- [x] Automated builds on all platforms
- [x] Test execution and coverage reporting
- [x] Artifact generation for releases
- [x] Quality gates prevent bad code merges

### [ ] ✅ Documentation
- [x] Comprehensive README with setup instructions
- [x] GitHub Pages documentation site deployed
- [x] API documentation generated and accurate
- [x] Example projects build and run correctly
- [x] Enhanced Copilot instructions enforce coding standards
- [x] Automated documentation deployment pipeline

### [ ] ✅ Developer Experience
- [x] Zero-config basic usage
- [x] Easy project customization
- [x] Clear error messages and debugging info
- [x] Consistent development environment across platforms
- [x] Comprehensive code quality tools and metrics
- [x] Automated refactoring and file organization
- [x] Deterministic testing framework

---

## Timeline Estimate
- Phase 1-2: Repository & Build System (2-3 days)
- Phase 3: Testing Infrastructure (1-2 days)  
- Phase 4: Code Quality Setup (1 day)
- Phase 5: CI/CD Implementation (1-2 days)
- Phase 6: Documentation (1-2 days)
- Phase 7: Examples & Templates (1 day)
- Phase 8: Validation & Finalization (1 day)

**Total Estimated Time: 8-12 days**

---

## Notes
- All MergeSource files in 00_c_source_files/ used as-is without modification
- Template supports immediate use with sensible defaults
- Extensible architecture allows project-specific customization
- Zero external dependencies beyond standard C11 and MergeSource
- Full cross-platform compatibility verified through CI/CD testing